
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: designs/digital_desing/src/digital_designs.v
Parsing SystemVerilog input from `designs/digital_desing/src/digital_designs.v' to AST representation.
Generating RTLIL representation for module `\pulse_generator'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/digital_desing/runs/RUN_2024.06.25_00.47.56/tmp/synthesis/hierarchy.dot'.
Dumping module pulse_generator to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \pulse_generator

3.2. Analyzing design hierarchy..
Top module:  \pulse_generator
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \pulse_generator

5.2. Analyzing design hierarchy..
Top module:  \pulse_generator
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:29$1 in module pulse_generator.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:27$12'.
  Set init value: \count = 11'00000000000

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:27$12'.
Creating decoders for process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:43$8'.
Creating decoders for process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:29$1'.
     1/1: $0\count[10:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pulse_generator.\sync_out' using process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:43$8'.
  created $dff cell `$procdff$19' with positive edge clock.
Creating register for signal `\pulse_generator.\count' using process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:29$1'.
  created $dff cell `$procdff$20' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:27$12'.
Removing empty process `pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:43$8'.
Found and cleaned up 2 empty switches in `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:29$1'.
Removing empty process `pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:29$1'.
Cleaned up 2 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module pulse_generator...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$20 ($dff) from module pulse_generator (D = $add$designs/digital_desing/src/digital_designs.v:33$4_Y [10:0], Q = \count, rval = 11'00000000000).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell pulse_generator.$sub$designs/digital_desing/src/digital_designs.v:32$2 ($sub).
Removed top 27 bits (of 32) from port Y of cell pulse_generator.$sub$designs/digital_desing/src/digital_designs.v:32$2 ($sub).
Removed top 31 bits (of 32) from port B of cell pulse_generator.$add$designs/digital_desing/src/digital_designs.v:33$4 ($add).
Removed top 21 bits (of 32) from port Y of cell pulse_generator.$add$designs/digital_desing/src/digital_designs.v:33$4 ($add).
Removed top 21 bits (of 32) from wire pulse_generator.$add$designs/digital_desing/src/digital_designs.v:33$4_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pulse_generator:
  creating $macc model for $add$designs/digital_desing/src/digital_designs.v:33$4 ($add).
  creating $macc model for $sub$designs/digital_desing/src/digital_designs.v:32$2 ($sub).
  creating $alu model for $macc $sub$designs/digital_desing/src/digital_designs.v:32$2.
  creating $alu model for $macc $add$designs/digital_desing/src/digital_designs.v:33$4.
  creating $alu model for $lt$designs/digital_desing/src/digital_designs.v:32$3 ($lt): new $alu
  creating $alu model for $eq$designs/digital_desing/src/digital_designs.v:44$10 ($eq): merged with $lt$designs/digital_desing/src/digital_designs.v:32$3.
  creating $alu cell for $lt$designs/digital_desing/src/digital_designs.v:32$3, $eq$designs/digital_desing/src/digital_designs.v:44$10: $auto$alumacc.cc:485:replace_alu$28
  creating $alu cell for $add$designs/digital_desing/src/digital_designs.v:33$4: $auto$alumacc.cc:485:replace_alu$35
  creating $alu cell for $sub$designs/digital_desing/src/digital_designs.v:32$2: $auto$alumacc.cc:485:replace_alu$38
  created 3 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.
<suppressed ~1 debug messages>

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.
<suppressed ~1 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using template $paramod$dde52db7035cb02b3cc5e73865788532339e3bcb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$2f5fb04daf2da94d981bf9455fa4454c6ec8b705\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$a4cd5864316cd4ed9c6832759038dc317198ba73\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~716 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.
<suppressed ~283 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 54 unused cells and 198 unused wires.
<suppressed ~55 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\pulse_generator' to `<abc-temp-dir>/input.blif'..
Extracted 103 gates and 119 wires to a netlist network with 16 inputs and 13 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        8
ABC RESULTS:               AND cells:        7
ABC RESULTS:                OR cells:       12
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:               XOR cells:       23
ABC RESULTS:        internal signals:       90
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       13
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 0 unused cells and 70 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \pulse_generator

40.2. Analyzing design hierarchy..
Top module:  \pulse_generator
Removed 0 unused modules.

41. Printing statistics.

=== pulse_generator ===

   Number of wires:                 95
   Number of wire bits:            128
   Number of public wires:           6
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                111
     $_ANDNOT_                      33
     $_AND_                          7
     $_DFF_P_                        1
     $_NAND_                         8
     $_NOR_                          6
     $_NOT_                          8
     $_ORNOT_                        2
     $_OR_                          12
     $_SDFF_PP0_                    11
     $_XOR_                         23

42. Executing CHECK pass (checking for obvious problems).
Checking module pulse_generator...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/digital_desing/runs/RUN_2024.06.25_00.47.56/tmp/synthesis/post_techmap.dot'.
Dumping module pulse_generator to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pulse_generator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pulse_generator.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pulse_generator'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pulse_generator.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..

47. Printing statistics.

=== pulse_generator ===

   Number of wires:                 95
   Number of wire bits:            128
   Number of public wires:           6
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                111
     $_ANDNOT_                      33
     $_AND_                          7
     $_DFF_P_                        1
     $_NAND_                         8
     $_NOR_                          6
     $_NOT_                          8
     $_ORNOT_                        2
     $_OR_                          12
     $_SDFF_PP0_                    11
     $_XOR_                         23

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/celina/open_pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/celina/open_pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/celina/open_pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/celina/open_pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\pulse_generator':
  mapped 12 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== pulse_generator ===

   Number of wires:                106
   Number of wire bits:            139
   Number of public wires:           6
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                122
     $_ANDNOT_                      33
     $_AND_                          7
     $_MUX_                         11
     $_NAND_                         8
     $_NOR_                          6
     $_NOT_                          8
     $_ORNOT_                        2
     $_OR_                          12
     $_XOR_                         23
     sky130_fd_sc_hd__dfxtp_2       12

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\pulse_generator' to `/tmp/yosys-abc-YrNcVQ/input.blif'..
Extracted 110 gates and 127 wires to a netlist network with 16 inputs and 12 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-YrNcVQ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-YrNcVQ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-YrNcVQ/input.blif 
ABC: + read_lib -w /openlane/designs/digital_desing/runs/RUN_2024.06.25_00.47.56/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/digital_desing/runs/RUN_2024.06.25_00.47.56/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    9.54 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/digital_desing/runs/RUN_2024.06.25_00.47.56/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/digital_desing/runs/RUN_2024.06.25_00.47.56/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 5000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 5000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 5000.0 
ABC: Current delay (2351.66 ps) does not exceed the target delay (5000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 5000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     63 (  9.5 %)   Cap = 11.7 ff (  2.0 %)   Area =      530.51 ( 90.5 %)   Delay =  2387.11 ps  ( 25.4 %)               
ABC: Path  0 --       1 : 0    3 pi                        A =   0.00  Df =  36.1  -20.2 ps  S =  55.6 ps  Cin =  0.0 ff  Cout =  10.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      29 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df = 685.5 -445.1 ps  S = 114.2 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 310.4 ff  G =  396  
ABC: Path  2 --      31 : 3    2 sky130_fd_sc_hd__and3_2   A =   7.51  Df = 914.8 -392.8 ps  S =  60.0 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 309.5 ff  G =  390  
ABC: Path  3 --      37 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df =1574.9 -633.7 ps  S = 104.5 ps  Cin =  1.5 ff  Cout =   4.1 ff  Cmax = 310.4 ff  G =  262  
ABC: Path  4 --      53 : 4    2 sky130_fd_sc_hd__o211a_2  A =  10.01  Df =1856.6 -376.7 ps  S =  53.0 ps  Cin =  2.4 ff  Cout =   4.7 ff  Cmax = 268.3 ff  G =  189  
ABC: Path  5 --      54 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2026.8 -287.0 ps  S = 300.0 ps  Cin =  2.1 ff  Cout =  25.0 ff  Cmax = 130.0 ff  G = 1110  
ABC: Path  6 --      61 : 5    1 sky130_fd_sc_hd__o2111a_2 A =  12.51  Df =2387.1 -302.1 ps  S = 188.0 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 299.4 ff  G = 1394  
ABC: Start-point = pi0 (\DIVIDE_BY_N [3]).  End-point = po2 ($auto$rtlil.cc:2607:MuxGate$976).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   16/   12  lat =    0  nd =    63  edge =    181  area =530.60  delay = 6.00  lev = 6
ABC: + write_blif /tmp/yosys-abc-YrNcVQ/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        9
ABC RESULTS:        internal signals:       99
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       12
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pulse_generator..
Removed 0 unused cells and 137 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module pulse_generator...
Warning: Wire pulse_generator.\sync_out is used but has no driver.
Warning: Wire pulse_generator.\comb_out is used but has no driver.
Found and reported 2 problems.

61. Printing statistics.

=== pulse_generator ===

   Number of wires:                 78
   Number of wire bits:             81
   Number of public wires:          16
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     sky130_fd_sc_hd__a21oi_2        4
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__and4_2         3
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1          4
     sky130_fd_sc_hd__dfxtp_2       12
     sky130_fd_sc_hd__inv_2          2
     sky130_fd_sc_hd__nand2_2        5
     sky130_fd_sc_hd__nor2_2        10
     sky130_fd_sc_hd__o2111a_2       3
     sky130_fd_sc_hd__o211a_2        9
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__or2_2          3
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or4_2          4
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\pulse_generator': 785.753600

62. Executing Verilog backend.
Dumping module `\pulse_generator'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 652488f250, CPU: user 0.70s system 0.03s, MEM: 28.25 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 41% 2x abc (0 sec), 14% 1x dfflibmap (0 sec), ...
