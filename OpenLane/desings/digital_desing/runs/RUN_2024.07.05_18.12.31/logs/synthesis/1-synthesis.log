
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: designs/digital_desing/src/digital_designs.v
Parsing SystemVerilog input from `designs/digital_desing/src/digital_designs.v' to AST representation.
Generating RTLIL representation for module `\digital_cs'.
Generating RTLIL representation for module `\pulse_generator'.
Generating RTLIL representation for module `\squared_wave_gen'.
FREQ      = 10000 kHz
PHASE     = 0 deg
DUTY      = 0 %
Note: Assuming pure combinatorial block at designs/digital_desing/src/digital_designs.v:113.5-119.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
designs/digital_desing/src/digital_designs.v:114: Warning: converting real value 1.000000e+02 to binary 100.
designs/digital_desing/src/digital_designs.v:115: Warning: converting real value 0.000000e+00 to binary 0.
designs/digital_desing/src/digital_designs.v:116: Warning: converting real value 1.000000e+00 to binary 1.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/digital_desing/runs/RUN_2024.07.05_18.12.31/tmp/synthesis/hierarchy.dot'.
Dumping module digital_cs to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \digital_cs
Used module:     \pulse_generator
Used module:     \squared_wave_gen
Parameter \FREQ = 130000
Parameter \PHASE = 0
Parameter \DUTY = 25

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\squared_wave_gen'.
Parameter \FREQ = 130000
Parameter \PHASE = 0
Parameter \DUTY = 25
Generating RTLIL representation for module `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen'.
FREQ      = 130000 kHz
PHASE     = 0 deg
DUTY      = 25 %
Note: Assuming pure combinatorial block at designs/digital_desing/src/digital_designs.v:113.5-119.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
designs/digital_desing/src/digital_designs.v:114: Warning: converting real value 7.692308e+00 to binary 8.
designs/digital_desing/src/digital_designs.v:115: Warning: converting real value 2.500000e-01 to binary 0.
designs/digital_desing/src/digital_designs.v:116: Warning: converting real value 7.500000e-01 to binary 1.
Parameter \FREQ = 130000
Parameter \PHASE = 0
Parameter \DUTY = 50

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\squared_wave_gen'.
Parameter \FREQ = 130000
Parameter \PHASE = 0
Parameter \DUTY = 50
Generating RTLIL representation for module `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen'.
FREQ      = 130000 kHz
PHASE     = 0 deg
DUTY      = 50 %
Note: Assuming pure combinatorial block at designs/digital_desing/src/digital_designs.v:113.5-119.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
designs/digital_desing/src/digital_designs.v:114: Warning: converting real value 7.692308e+00 to binary 8.
designs/digital_desing/src/digital_designs.v:115: Warning: converting real value 5.000000e-01 to binary 1.
designs/digital_desing/src/digital_designs.v:116: Warning: converting real value 5.000000e-01 to binary 1.
Parameter \FREQ = 130000
Parameter \PHASE = 180
Parameter \DUTY = 50

3.4. Executing AST frontend in derive mode using pre-parsed AST for module `\squared_wave_gen'.
Parameter \FREQ = 130000
Parameter \PHASE = 180
Parameter \DUTY = 50
Generating RTLIL representation for module `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen'.
FREQ      = 130000 kHz
PHASE     = 180 deg
DUTY      = 50 %
Note: Assuming pure combinatorial block at designs/digital_desing/src/digital_designs.v:113.5-119.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
designs/digital_desing/src/digital_designs.v:114: Warning: converting real value 7.692308e+00 to binary 8.
designs/digital_desing/src/digital_designs.v:115: Warning: converting real value 5.000000e-01 to binary 1.
designs/digital_desing/src/digital_designs.v:116: Warning: converting real value 5.000000e-01 to binary 1.

3.5. Analyzing design hierarchy..
Top module:  \digital_cs
Used module:     \pulse_generator
Used module:     $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen
Used module:     $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen
Used module:     $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen
Used module:     \squared_wave_gen

3.6. Analyzing design hierarchy..
Top module:  \digital_cs
Used module:     \pulse_generator
Used module:     $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen
Used module:     $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen
Used module:     $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen
Used module:     \squared_wave_gen
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \digital_cs
Used module:     \pulse_generator
Used module:     $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen
Used module:     $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen
Used module:     $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen
Used module:     \squared_wave_gen

5.2. Analyzing design hierarchy..
Top module:  \digital_cs
Used module:     \pulse_generator
Used module:     $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen
Used module:     $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen
Used module:     $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen
Used module:     \squared_wave_gen
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:139$71 in module $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.
Marked 1 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:130$70 in module $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.
Marked 3 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:139$58 in module $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.
Marked 1 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:130$57 in module $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.
Marked 3 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:139$45 in module $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.
Marked 1 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:130$44 in module $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.
Marked 3 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:139$32 in module squared_wave_gen.
Marked 1 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:130$31 in module squared_wave_gen.
Marked 2 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:76$13 in module pulse_generator.
Marked 1 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:44$2 in module digital_cs.
Marked 1 switch rules as full_case in process $proc$designs/digital_desing/src/digital_designs.v:35$1 in module digital_cs.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 11 redundant assignments.
Promoted 37 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$76'.
  Set init value: \out_signal = 1'0
  Set init value: \count = 0
  Set init value: \start_clk = 1'0
Found init rule in `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$63'.
  Set init value: \out_signal = 1'0
  Set init value: \count = 0
  Set init value: \start_clk = 1'0
Found init rule in `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$50'.
  Set init value: \out_signal = 1'0
  Set init value: \count = 0
  Set init value: \start_clk = 1'0
Found init rule in `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$37'.
  Set init value: \out_signal = 1'0
  Set init value: \count = 0
  Set init value: \start_clk = 1'0
Found init rule in `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:74$24'.
  Set init value: \count = 0
Found init rule in `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:33$12'.
  Set init value: \counter = 0
Found init rule in `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:32$11'.
  Set init value: \enable_shifteo = 1'1

10. Executing PROC_ARST pass (detect async resets in processes).
Found VHDL-style edge-trigger \start_clk in `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$71'.
Found async reset \enable in `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$70'.
Found VHDL-style edge-trigger \start_clk in `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$58'.
Found async reset \enable in `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$57'.
Found VHDL-style edge-trigger \start_clk in `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$45'.
Found async reset \enable in `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$44'.
Found VHDL-style edge-trigger \start_clk in `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$32'.
Found async reset \enable in `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$31'.
Found VHDL-style edge-trigger \enable in `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:35$1'.

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$76'.
Creating decoders for process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$71'.
     1/2: $0\count[31:0]
     2/2: $1\out_signal[0:0]
Creating decoders for process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$70'.
     1/2: $0\start_clk[0:0]
     2/2: $0\out_signal[0:0]
Creating decoders for process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$64'.
Creating decoders for process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$63'.
Creating decoders for process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$58'.
     1/2: $0\count[31:0]
     2/2: $1\out_signal[0:0]
Creating decoders for process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$57'.
     1/2: $0\start_clk[0:0]
     2/2: $0\out_signal[0:0]
Creating decoders for process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$51'.
Creating decoders for process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$50'.
Creating decoders for process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$45'.
     1/2: $0\count[31:0]
     2/2: $1\out_signal[0:0]
Creating decoders for process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$44'.
     1/2: $0\start_clk[0:0]
     2/2: $0\out_signal[0:0]
Creating decoders for process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$38'.
Creating decoders for process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$37'.
Creating decoders for process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$32'.
     1/2: $0\count[31:0]
     2/2: $1\out_signal[0:0]
Creating decoders for process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$31'.
     1/2: $0\start_clk[0:0]
     2/2: $0\out_signal[0:0]
Creating decoders for process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$25'.
Creating decoders for process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:74$24'.
Creating decoders for process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:90$20'.
Creating decoders for process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:76$13'.
     1/1: $0\count[31:0]
Creating decoders for process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:33$12'.
Creating decoders for process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:32$11'.
Creating decoders for process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:44$2'.
     1/1: $1\enable_shifteo[0:0]
Creating decoders for process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:35$1'.
     1/2: $0\enable_shifteo[0:0]
     2/2: $0\counter[31:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\clk_pd' from process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$64'.
No latch inferred for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\clk_on' from process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$64'.
No latch inferred for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\clk_off' from process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$64'.
No latch inferred for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\quarter' from process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$64'.
No latch inferred for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\start_dly' from process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$64'.
No latch inferred for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\clk_pd' from process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$51'.
No latch inferred for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\clk_on' from process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$51'.
No latch inferred for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\clk_off' from process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$51'.
No latch inferred for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\quarter' from process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$51'.
No latch inferred for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\start_dly' from process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$51'.
No latch inferred for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\clk_pd' from process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$38'.
No latch inferred for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\clk_on' from process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$38'.
No latch inferred for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\clk_off' from process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$38'.
No latch inferred for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\quarter' from process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$38'.
No latch inferred for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\start_dly' from process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$38'.
No latch inferred for signal `\squared_wave_gen.\clk_pd' from process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$25'.
No latch inferred for signal `\squared_wave_gen.\clk_on' from process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$25'.
No latch inferred for signal `\squared_wave_gen.\clk_off' from process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$25'.
No latch inferred for signal `\squared_wave_gen.\quarter' from process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$25'.
No latch inferred for signal `\squared_wave_gen.\start_dly' from process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$25'.

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\out_signal' using process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$71'.
  created $dff cell `$procdff$86' with positive edge clock.
Creating register for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\count' using process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$71'.
  created $dff cell `$procdff$87' with positive edge clock.
Creating register for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\out_signal' using process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$70'.
  created $dff cell `$procdff$90' with negative edge clock.
Creating register for signal `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\start_clk' using process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$70'.
  created $adff cell `$procdff$91' with negative edge clock and positive level reset.
Creating register for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\out_signal' using process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$58'.
  created $dff cell `$procdff$92' with positive edge clock.
Creating register for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\count' using process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$58'.
  created $dff cell `$procdff$93' with positive edge clock.
Creating register for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\out_signal' using process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$57'.
  created $dff cell `$procdff$96' with negative edge clock.
Creating register for signal `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\start_clk' using process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$57'.
  created $adff cell `$procdff$97' with negative edge clock and positive level reset.
Creating register for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\out_signal' using process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$45'.
  created $dff cell `$procdff$98' with positive edge clock.
Creating register for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\count' using process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$45'.
  created $dff cell `$procdff$99' with positive edge clock.
Creating register for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\out_signal' using process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$44'.
  created $dff cell `$procdff$102' with negative edge clock.
Creating register for signal `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\start_clk' using process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$44'.
  created $adff cell `$procdff$103' with negative edge clock and positive level reset.
Creating register for signal `\squared_wave_gen.\out_signal' using process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$32'.
  created $dff cell `$procdff$104' with positive edge clock.
Creating register for signal `\squared_wave_gen.\count' using process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$32'.
  created $dff cell `$procdff$105' with positive edge clock.
Creating register for signal `\squared_wave_gen.\out_signal' using process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$31'.
  created $dff cell `$procdff$108' with negative edge clock.
Creating register for signal `\squared_wave_gen.\start_clk' using process `\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$31'.
  created $adff cell `$procdff$109' with negative edge clock and positive level reset.
Creating register for signal `\pulse_generator.\sync_out' using process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:90$20'.
  created $dff cell `$procdff$110' with positive edge clock.
Creating register for signal `\pulse_generator.\count' using process `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:76$13'.
  created $dff cell `$procdff$111' with positive edge clock.
Creating register for signal `\digital_cs.\enable_shifteo' using process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:44$2'.
  created $dff cell `$procdff$112' with positive edge clock.
Creating register for signal `\digital_cs.\counter' using process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:44$2'.
  created $dff cell `$procdff$113' with positive edge clock.
Creating register for signal `\digital_cs.\enable_shifteo' using process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:35$1'.
  created $dff cell `$procdff$114' with positive edge clock.
Creating register for signal `\digital_cs.\counter' using process `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:35$1'.
  created $dff cell `$procdff$115' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$76'.
Removing empty process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$71'.
Removing empty process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$70'.
Removing empty process `$paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$64'.
Removing empty process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$63'.
Removing empty process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$58'.
Removing empty process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$57'.
Removing empty process `$paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$51'.
Removing empty process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$50'.
Removing empty process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$45'.
Removing empty process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$44'.
Removing empty process `$paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$38'.
Removing empty process `squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:0$37'.
Removing empty process `squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:139$32'.
Removing empty process `squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:130$31'.
Removing empty process `squared_wave_gen.$proc$designs/digital_desing/src/digital_designs.v:113$25'.
Removing empty process `pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:74$24'.
Removing empty process `pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:90$20'.
Found and cleaned up 2 empty switches in `\pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:76$13'.
Removing empty process `pulse_generator.$proc$designs/digital_desing/src/digital_designs.v:76$13'.
Removing empty process `digital_cs.$proc$designs/digital_desing/src/digital_designs.v:33$12'.
Removing empty process `digital_cs.$proc$designs/digital_desing/src/digital_designs.v:32$11'.
Found and cleaned up 1 empty switch in `\digital_cs.$proc$designs/digital_desing/src/digital_designs.v:44$2'.
Removing empty process `digital_cs.$proc$designs/digital_desing/src/digital_designs.v:44$2'.
Removing empty process `digital_cs.$proc$designs/digital_desing/src/digital_designs.v:35$1'.
Cleaned up 3 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen...
Warning: multiple conflicting drivers for $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.\out_signal:
    port Q[0] of cell $procdff$90 ($dff)
    port Q[0] of cell $procdff$86 ($dff)
Checking module $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen...
Warning: multiple conflicting drivers for $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.\out_signal:
    port Q[0] of cell $procdff$96 ($dff)
    port Q[0] of cell $procdff$92 ($dff)
Checking module $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen...
Warning: multiple conflicting drivers for $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.\out_signal:
    port Q[0] of cell $procdff$102 ($dff)
    port Q[0] of cell $procdff$98 ($dff)
Checking module squared_wave_gen...
Warning: multiple conflicting drivers for squared_wave_gen.\out_signal:
    port Q[0] of cell $procdff$108 ($dff)
    port Q[0] of cell $procdff$104 ($dff)
Checking module pulse_generator...
Checking module digital_cs...
Warning: multiple conflicting drivers for digital_cs.\enable_shifteo:
    port Q[0] of cell $procdff$114 ($dff)
    port Q[0] of cell $procdff$112 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [31]:
    port Q[31] of cell $procdff$115 ($dff)
    port Q[31] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [30]:
    port Q[30] of cell $procdff$115 ($dff)
    port Q[30] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [29]:
    port Q[29] of cell $procdff$115 ($dff)
    port Q[29] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [28]:
    port Q[28] of cell $procdff$115 ($dff)
    port Q[28] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [27]:
    port Q[27] of cell $procdff$115 ($dff)
    port Q[27] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [26]:
    port Q[26] of cell $procdff$115 ($dff)
    port Q[26] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [25]:
    port Q[25] of cell $procdff$115 ($dff)
    port Q[25] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [24]:
    port Q[24] of cell $procdff$115 ($dff)
    port Q[24] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [23]:
    port Q[23] of cell $procdff$115 ($dff)
    port Q[23] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [22]:
    port Q[22] of cell $procdff$115 ($dff)
    port Q[22] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [21]:
    port Q[21] of cell $procdff$115 ($dff)
    port Q[21] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [20]:
    port Q[20] of cell $procdff$115 ($dff)
    port Q[20] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [19]:
    port Q[19] of cell $procdff$115 ($dff)
    port Q[19] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [18]:
    port Q[18] of cell $procdff$115 ($dff)
    port Q[18] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [17]:
    port Q[17] of cell $procdff$115 ($dff)
    port Q[17] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [16]:
    port Q[16] of cell $procdff$115 ($dff)
    port Q[16] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [15]:
    port Q[15] of cell $procdff$115 ($dff)
    port Q[15] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [14]:
    port Q[14] of cell $procdff$115 ($dff)
    port Q[14] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [13]:
    port Q[13] of cell $procdff$115 ($dff)
    port Q[13] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [12]:
    port Q[12] of cell $procdff$115 ($dff)
    port Q[12] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [11]:
    port Q[11] of cell $procdff$115 ($dff)
    port Q[11] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [10]:
    port Q[10] of cell $procdff$115 ($dff)
    port Q[10] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [9]:
    port Q[9] of cell $procdff$115 ($dff)
    port Q[9] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [8]:
    port Q[8] of cell $procdff$115 ($dff)
    port Q[8] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [7]:
    port Q[7] of cell $procdff$115 ($dff)
    port Q[7] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [6]:
    port Q[6] of cell $procdff$115 ($dff)
    port Q[6] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [5]:
    port Q[5] of cell $procdff$115 ($dff)
    port Q[5] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [4]:
    port Q[4] of cell $procdff$115 ($dff)
    port Q[4] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [3]:
    port Q[3] of cell $procdff$115 ($dff)
    port Q[3] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [2]:
    port Q[2] of cell $procdff$115 ($dff)
    port Q[2] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [1]:
    port Q[1] of cell $procdff$115 ($dff)
    port Q[1] of cell $procdff$113 ($dff)
Warning: multiple conflicting drivers for digital_cs.\counter [0]:
    port Q[0] of cell $procdff$115 ($dff)
    port Q[0] of cell $procdff$113 ($dff)
Found and reported 37 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.
<suppressed ~6 debug messages>
Optimizing module $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.
<suppressed ~6 debug messages>
Optimizing module $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.
<suppressed ~6 debug messages>
Optimizing module squared_wave_gen.
<suppressed ~6 debug messages>
Optimizing module pulse_generator.
Optimizing module digital_cs.

19. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod$1de6e83b57250f489a4298b364363db428ea2b20\squared_wave_gen.
Deleting now unused module $paramod$16b66525c81909e6856c6221b16371e449274451\squared_wave_gen.
Deleting now unused module $paramod$f40fc4867c6a4cdbd81862ea685c0420c2f18062\squared_wave_gen.
Deleting now unused module squared_wave_gen.
Deleting now unused module pulse_generator.
<suppressed ~5 debug messages>

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.
<suppressed ~1 debug messages>

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 24 unused cells and 113 unused wires.
<suppressed ~33 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $procdff$114 ($dff) from module digital_cs.
Setting constant 0-bit at position 0 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 1 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 2 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 3 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 4 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 5 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 6 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 7 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 8 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 9 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 10 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 11 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 12 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 13 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 14 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 15 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 16 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 17 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 18 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 19 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 20 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 21 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 22 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 23 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 24 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 25 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 26 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 27 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 28 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 29 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 30 on $procdff$115 ($dff) from module digital_cs.
Setting constant 0-bit at position 31 on $procdff$115 ($dff) from module digital_cs.

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Warning: Driver-driver conflict for \enable_shifteo between cell $procdff$112.Q and constant 1'1 in digital_cs: Resolved using constant.
Removed 5 unused cells and 6 unused wires.
<suppressed ~6 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.
<suppressed ~1 debug messages>

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\gen_phi_p.$procdff$111 ($dff) from module digital_cs (D = $flatten\gen_phi_p.$add$designs/digital_desing/src/digital_designs.v:80$16_Y, Q = \gen_phi_p.count, rval = 0).
Adding EN signal on $flatten\gen_phi_l2.$procdff$96 ($dff) from module digital_cs (D = 1'0, Q = \gen_phi_l2.out_signal).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$119 ($dffe) from module digital_cs.

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Warning: Driver-driver conflict for \gen_phi_l2.out_signal between cell $flatten\gen_phi_l2.$procdff$92.Q and constant 1'0 in digital_cs: Resolved using constant.
Removed 5 unused cells and 6 unused wires.
<suppressed ~9 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 16) from port B of cell digital_cs.$mul$designs/digital_desing/src/digital_designs.v:62$9 ($mul).
Removed top 9 bits (of 32) from port Y of cell digital_cs.$mul$designs/digital_desing/src/digital_designs.v:62$9 ($mul).
Removed top 11 bits (of 32) from port A of cell digital_cs.$add$designs/digital_desing/src/digital_designs.v:62$10 ($add).
Removed top 9 bits (of 32) from port B of cell digital_cs.$add$designs/digital_desing/src/digital_designs.v:62$10 ($add).
Removed top 8 bits (of 32) from port Y of cell digital_cs.$add$designs/digital_desing/src/digital_designs.v:62$10 ($add).
Removed top 31 bits (of 32) from port B of cell digital_cs.$flatten\gen_phi_p.$add$designs/digital_desing/src/digital_designs.v:80$16 ($add).
Removed top 8 bits (of 32) from port A of cell digital_cs.$flatten\gen_phi_p.$sub$designs/digital_desing/src/digital_designs.v:79$14 ($sub).
Removed top 31 bits (of 32) from port B of cell digital_cs.$flatten\gen_phi_p.$sub$designs/digital_desing/src/digital_designs.v:79$14 ($sub).
Removed top 7 bits (of 32) from port Y of cell digital_cs.$flatten\gen_phi_p.$sub$designs/digital_desing/src/digital_designs.v:79$14 ($sub).
Removed top 9 bits (of 32) from wire digital_cs.$mul$designs/digital_desing/src/digital_designs.v:62$9_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module digital_cs:
  creating $macc model for $add$designs/digital_desing/src/digital_designs.v:62$10 ($add).
  creating $macc model for $flatten\gen_phi_p.$add$designs/digital_desing/src/digital_designs.v:80$16 ($add).
  creating $macc model for $flatten\gen_phi_p.$sub$designs/digital_desing/src/digital_designs.v:79$14 ($sub).
  creating $macc model for $mul$designs/digital_desing/src/digital_designs.v:62$9 ($mul).
  merging $macc model for $add$designs/digital_desing/src/digital_designs.v:62$10 into $flatten\gen_phi_p.$sub$designs/digital_desing/src/digital_designs.v:79$14.
  merging $macc model for $mul$designs/digital_desing/src/digital_designs.v:62$9 into $flatten\gen_phi_p.$sub$designs/digital_desing/src/digital_designs.v:79$14.
  creating $alu model for $macc $flatten\gen_phi_p.$add$designs/digital_desing/src/digital_designs.v:80$16.
  creating $macc cell for $flatten\gen_phi_p.$sub$designs/digital_desing/src/digital_designs.v:79$14: $auto$alumacc.cc:365:replace_macc$121
  creating $alu model for $flatten\gen_phi_p.$lt$designs/digital_desing/src/digital_designs.v:79$15 ($lt): new $alu
  creating $alu model for $flatten\gen_phi_p.$eq$designs/digital_desing/src/digital_designs.v:91$22 ($eq): merged with $flatten\gen_phi_p.$lt$designs/digital_desing/src/digital_designs.v:79$15.
  creating $alu cell for $flatten\gen_phi_p.$lt$designs/digital_desing/src/digital_designs.v:79$15, $flatten\gen_phi_p.$eq$designs/digital_desing/src/digital_designs.v:91$22: $auto$alumacc.cc:485:replace_alu$123
  creating $alu cell for $flatten\gen_phi_p.$add$designs/digital_desing/src/digital_designs.v:80$16: $auto$alumacc.cc:485:replace_alu$130
  created 2 $alu and 1 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.
<suppressed ~12 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $not.
Using extmapper maccmap for cells of type $macc.
  add 15'110010000101001 * \f_select (15x8 bits, unsigned)
  add 25'0000110000110100111111111 (25 bits, unsigned)
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000011001 for cells of type $fa.
Using template $paramod$4868d58a04723871777326409a611fa912defcd8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011001 for cells of type $lcu.
No more expansions possible.
<suppressed ~879 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.
<suppressed ~1231 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
<suppressed ~156 debug messages>
Removed a total of 52 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 132 unused cells and 359 unused wires.
<suppressed ~133 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\digital_cs' to `<abc-temp-dir>/input.blif'..
Extracted 562 gates and 603 wires to a netlist network with 41 inputs and 34 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:       28
ABC RESULTS:              XNOR cells:       36
ABC RESULTS:               NOR cells:       24
ABC RESULTS:               NOT cells:       26
ABC RESULTS:                OR cells:       30
ABC RESULTS:              NAND cells:       44
ABC RESULTS:            ANDNOT cells:      199
ABC RESULTS:               AND cells:       25
ABC RESULTS:               XOR cells:      125
ABC RESULTS:        internal signals:      528
ABC RESULTS:           input signals:       41
ABC RESULTS:          output signals:       34
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 0 unused cells and 255 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \digital_cs

40.2. Analyzing design hierarchy..
Top module:  \digital_cs
Removed 0 unused modules.

41. Printing statistics.

=== digital_cs ===

   Number of wires:                543
   Number of wire bits:           1325
   Number of public wires:          40
   Number of public wire bits:     760
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                566
     $_ANDNOT_                     199
     $_AND_                         25
     $_DFF_P_                        1
     $_NAND_                        44
     $_NOR_                         22
     $_NOT_                         26
     $_ORNOT_                       28
     $_OR_                          30
     $_SDFF_PN0_                    32
     $_XNOR_                        35
     $_XOR_                        124

42. Executing CHECK pass (checking for obvious problems).
Checking module digital_cs...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/digital_desing/runs/RUN_2024.07.05_18.12.31/tmp/synthesis/post_techmap.dot'.
Dumping module digital_cs to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \digital_cs..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \digital_cs.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\digital_cs'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module digital_cs.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 0 unused cells and 32 unused wires.
<suppressed ~32 debug messages>

47. Printing statistics.

=== digital_cs ===

   Number of wires:                511
   Number of wire bits:            611
   Number of public wires:           8
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                566
     $_ANDNOT_                     199
     $_AND_                         25
     $_DFF_P_                        1
     $_NAND_                        44
     $_NOR_                         22
     $_NOT_                         26
     $_ORNOT_                       28
     $_OR_                          30
     $_SDFF_PN0_                    32
     $_XNOR_                        35
     $_XOR_                        124

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/celina/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/celina/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/celina/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/celina/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\digital_cs':
  mapped 33 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== digital_cs ===

   Number of wires:                543
   Number of wire bits:            643
   Number of public wires:           8
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                598
     $_ANDNOT_                     199
     $_AND_                         25
     $_MUX_                         32
     $_NAND_                        44
     $_NOR_                         22
     $_NOT_                         26
     $_ORNOT_                       28
     $_OR_                          30
     $_XNOR_                        35
     $_XOR_                        124
     sky130_fd_sc_hd__dfxtp_2       33

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\digital_cs' to `/tmp/yosys-abc-x4KsHV/input.blif'..
Extracted 565 gates and 607 wires to a netlist network with 41 inputs and 33 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-x4KsHV/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-x4KsHV/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-x4KsHV/input.blif 
ABC: + read_lib -w /openlane/designs/digital_desing/runs/RUN_2024.07.05_18.12.31/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/digital_desing/runs/RUN_2024.07.05_18.12.31/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    9.54 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/digital_desing/runs/RUN_2024.07.05_18.12.31/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/digital_desing/runs/RUN_2024.07.05_18.12.31/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 5000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 5000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 5000.0 
ABC: + dnsize -D 5000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    410 (  7.6 %)   Cap = 10.5 ff (  1.5 %)   Area =     3763.61 ( 90.7 %)   Delay =  4892.92 ps  ( 27.1 %)               
ABC: Path  0 --      14 : 0    6 pi                         A =   0.00  Df =  88.6  -48.1 ps  S = 130.7 ps  Cin =  0.0 ff  Cout =  27.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      96 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df = 477.9 -203.6 ps  S = 459.7 ps  Cin =  2.1 ff  Cout =  38.9 ff  Cmax = 130.0 ff  G = 1772  
ABC: Path  2 --     296 : 2    2 sky130_fd_sc_hd__nor2_2    A =   6.26  Df = 569.0 -115.3 ps  S = 107.6 ps  Cin =  4.4 ff  Cout =   6.4 ff  Cmax = 141.9 ff  G =  138  
ABC: Path  3 --     297 : 2    2 sky130_fd_sc_hd__or2b_2    A =   8.76  Df = 879.9  -56.6 ps  S =  61.7 ps  Cin =  1.6 ff  Cout =   6.1 ff  Cmax = 312.2 ff  G =  372  
ABC: Path  4 --     298 : 2    3 sky130_fd_sc_hd__or2_2     A =   6.26  Df =1179.4 -170.6 ps  S =  72.5 ps  Cin =  1.5 ff  Cout =   9.0 ff  Cmax = 299.4 ff  G =  599  
ABC: Path  5 --     303 : 5    4 sky130_fd_sc_hd__a2111o_2  A =  12.51  Df =1637.3  -90.0 ps  S =  89.2 ps  Cin =  2.4 ff  Cout =  12.0 ff  Cmax = 324.1 ff  G =  477  
ABC: Path  6 --     306 : 3    4 sky130_fd_sc_hd__a21o_2    A =   8.76  Df =1891.4 -182.4 ps  S =  80.4 ps  Cin =  2.4 ff  Cout =  13.7 ff  Cmax = 309.5 ff  G =  559  
ABC: Path  7 --     309 : 4    3 sky130_fd_sc_hd__a211o_2   A =  10.01  Df =2252.0 -382.4 ps  S =  70.4 ps  Cin =  2.4 ff  Cout =  11.9 ff  Cmax = 325.0 ff  G =  477  
ABC: Path  8 --     310 : 5    3 sky130_fd_sc_hd__o311ai_2  A =  16.27  Df =2589.6 -600.7 ps  S = 373.4 ps  Cin =  4.4 ff  Cout =  13.3 ff  Cmax =  82.4 ff  G =  293  
ABC: Path  9 --     311 : 3    2 sky130_fd_sc_hd__a21o_2    A =   8.76  Df =2807.5 -554.2 ps  S =  67.6 ps  Cin =  2.4 ff  Cout =  10.3 ff  Cmax = 309.5 ff  G =  425  
ABC: Path 10 --     312 : 4    1 sky130_fd_sc_hd__o2bb2a_2  A =  11.26  Df =3031.6 -523.0 ps  S =  67.2 ps  Cin =  1.8 ff  Cout =   8.4 ff  Cmax = 294.8 ff  G =  470  
ABC: Path 11 --     313 : 2    3 sky130_fd_sc_hd__xnor2_2   A =  16.27  Df =3220.6 -557.7 ps  S = 203.7 ps  Cin =  8.5 ff  Cout =  11.8 ff  Cmax = 121.8 ff  G =  130  
ABC: Path 12 --     322 : 5    2 sky130_fd_sc_hd__o2111ai_2 A =  15.01  Df =3339.2 -110.2 ps  S = 147.0 ps  Cin =  4.3 ff  Cout =   3.3 ff  Cmax = 129.1 ff  G =   71  
ABC: Path 13 --     342 : 4    2 sky130_fd_sc_hd__or4_2     A =   8.76  Df =4011.7 -470.5 ps  S = 116.4 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 310.4 ff  G =  450  
ABC: Path 14 --     385 : 5    5 sky130_fd_sc_hd__o221a_2   A =  11.26  Df =4350.0 -582.7 ps  S =  89.1 ps  Cin =  2.3 ff  Cout =  12.0 ff  Cmax = 281.1 ff  G =  483  
ABC: Path 15 --     386 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df =4531.5 -491.0 ps  S = 305.4 ps  Cin =  2.1 ff  Cout =  25.4 ff  Cmax = 130.0 ff  G = 1133  
ABC: Path 16 --     399 : 5    1 sky130_fd_sc_hd__o2111a_2  A =  12.51  Df =4892.9 -506.5 ps  S = 188.2 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 299.4 ff  G = 1394  
ABC: Start-point = pi13 (\f_select [2]).  End-point = po1 ($auto$rtlil.cc:2607:MuxGate$3163).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   41/   33  lat =    0  nd =   410  edge =   1051  area =3764.33  delay =18.00  lev = 18
ABC: + write_blif /tmp/yosys-abc-x4KsHV/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       46
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:       26
ABC RESULTS:          _const0_ cells:        9
ABC RESULTS:        internal signals:      533
ABC RESULTS:           input signals:       41
ABC RESULTS:          output signals:       33
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \digital_cs..
Removed 0 unused cells and 650 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module digital_cs...
Warning: Wire digital_cs.\phi_r is used but has no driver.
Warning: Wire digital_cs.\phi_p is used but has no driver.
Warning: Wire digital_cs.\phi_l2 is used but has no driver.
Warning: Wire digital_cs.\phi_l1 is used but has no driver.
Found and reported 4 problems.

61. Printing statistics.

=== digital_cs ===

   Number of wires:                449
   Number of wire bits:            456
   Number of public wires:          39
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                446
     sky130_fd_sc_hd__a2111o_2       2
     sky130_fd_sc_hd__a211o_2        3
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21bo_2        2
     sky130_fd_sc_hd__a21boi_2       3
     sky130_fd_sc_hd__a21o_2        13
     sky130_fd_sc_hd__a21oi_2       21
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a22oi_2        5
     sky130_fd_sc_hd__a2bb2o_2       5
     sky130_fd_sc_hd__a31o_2         2
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__and2_2        21
     sky130_fd_sc_hd__and2b_2        9
     sky130_fd_sc_hd__and3_2        16
     sky130_fd_sc_hd__and3b_2        1
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1         15
     sky130_fd_sc_hd__buf_2          3
     sky130_fd_sc_hd__conb_1        12
     sky130_fd_sc_hd__dfxtp_2       33
     sky130_fd_sc_hd__inv_2         13
     sky130_fd_sc_hd__mux2_2         1
     sky130_fd_sc_hd__nand2_2       43
     sky130_fd_sc_hd__nand3_2        5
     sky130_fd_sc_hd__nand4_2        2
     sky130_fd_sc_hd__nor2_2        46
     sky130_fd_sc_hd__nor3_2         2
     sky130_fd_sc_hd__o2111a_2      26
     sky130_fd_sc_hd__o2111ai_2      2
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21ai_2       10
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o221a_2        2
     sky130_fd_sc_hd__o22a_2         4
     sky130_fd_sc_hd__o22ai_2        3
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o311ai_2       1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__o32a_2         2
     sky130_fd_sc_hd__or2_2         19
     sky130_fd_sc_hd__or2b_2         7
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or3b_2         3
     sky130_fd_sc_hd__or4_2          4
     sky130_fd_sc_hd__or4_4          1
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__xnor2_2       43
     sky130_fd_sc_hd__xor2_2        19

   Chip area for module '\digital_cs': 4510.576000

62. Executing Verilog backend.
Dumping module `\digital_cs'.

Warnings: 50 unique messages, 55 total
End of script. Logfile hash: 51330bcc28, CPU: user 1.20s system 0.04s, MEM: 30.31 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 61% 2x abc (1 sec), 7% 22x opt_expr (0 sec), ...
